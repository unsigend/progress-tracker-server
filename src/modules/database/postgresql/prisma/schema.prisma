generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}


/*
  This model is used to store the book information.
*/
model Book {
  // primary key
  id        String   @id @default(uuid())

  // fields
  title     String
  author    String?
  description String?
  ISBN10    String? @unique
  ISBN13    String? @unique
  pages     Int
  cover_url String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdById String

  // index optimization
  @@index([title])
  @@index([createdById])

  // relation
  user_books UserBook[]
  createdBy  User     @relation("CreatedBooks", fields: [createdById], references: [id])
}

/*
  This enum is used to store the reading status.
*/
enum ReadingStatus {
  IN_PROGRESS
  COMPLETED
}

/*
  This model is used to store the user book information.
*/
model UserBook {
  // primary key
  id        String   @id @default(uuid())

  // foreign key
  book_id   String
  user_id   String

  // fields
  status    ReadingStatus @default(IN_PROGRESS)
  current_page Int     @default(0)
  start_date DateTime?  @db.Date
  completed_date DateTime?  @db.Date
  total_minutes Int     @default(0)
  total_days Int     @default(0)

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relation
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [book_id], references: [id], onDelete: Cascade)
  reading_records ReadingRecord[]

  // constraint
  @@unique([book_id, user_id])

  // index optimization
  @@index([user_id, status])
}

/*
  This model is used to store the reading record information.
*/
model ReadingRecord {
  // primary key
  id        String   @id @default(uuid())

  // foreign key
  user_book_id String

  // fields
  date      DateTime @db.Date
  pages     Int   @default(0)
  minutes   Int   @default(0)
  notes     String?

  // relation
  user_book UserBook @relation(fields: [user_book_id], references: [id], onDelete: Cascade)

  // constraint
  @@unique([user_book_id, date])

  // index optimization
  @@index([user_book_id, date])
}

/*
  This enum is used to store the user role.
*/
enum UserRole {
  ADMIN
  USER
}

/*
  This model is used to store the user information.
*/
model User {
  // primary key
  id        String   @id @default(uuid())

  // fields
  username  String   
  email     String   @unique
  password  String
  avatar_url String?
  provider  String[] @default(["local"])
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  // relation
  user_books UserBook[]
  createdBooks Book[] @relation("CreatedBooks")
}
